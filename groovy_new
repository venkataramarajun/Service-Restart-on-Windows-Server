@Library('shared-library') _

pipeline {
    agent {
        node {
            label 'docker-build-aws'
        }
    }

    environment {
        JENKINS_TOKEN = credentials("pavani_jenkins_api_token")
    }

    stages {
        stage('Create Jobs from YAML Files') {
            steps {
                script {
                    // Print the current workspace
                    def workspace = pwd()
                    echo "Workspace Path: ${workspace}"

                    // List the files in the User_Inputs/RestartRDS directory
                    sh 'ls -la User_Inputs/RestartRDS/'

                    // Get all YAML files from the directory
                    def filenames = getFileNames('User_Inputs/RestartRDS')

                    if (filenames.size() == 0) {
                        error("No YAML files found in the specified directory.")
                    }

                    // Loop through each YAML file
                    filenames.each { yamlFilePath ->
                        echo "Processing YAML file: ${yamlFilePath}"

                        // Extract the db_name, region, and schedule from each YAML file
                        def result = extractSchedule(yamlFilePath)
                        def dbname = result.dbname
                        def region = result.region
                        def schedule = result.schedule

                        // Log the extracted values
                        echo "Database Name: ${dbname}, Region: ${region}, Schedule: ${schedule}"

                        // Define folder and job name
                        def folder = "GHSSelfServicePlatform/AWS-RDS-Restart"
                        def jobname = "${dbname}-restart-job"

                        // Create the Jenkins job for this YAML file
                        createJob(dbname, region, schedule, folder, jobname, JENKINS_TOKEN_USR, JENKINS_TOKEN_PSW)
                    }
                }
            }
        }
    }
}

// Function to create a Jenkins job using the provided parameters
def createJob(String dbname, String region, String schedule, String folder, String jobname, String username, String token) {
    def jenkinsPath = getJenkinsJobPath(folder)

    // Define the Jenkins job configuration (dynamic XML)
    def jobConfig = """
        <flow-definition>
          <description>Job to restart RDS ${dbname} in ${region}</description>
          <keepDependencies>false</keepDependencies>
          <properties/>
          <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.93">
            <script>
              pipeline {
                agent any
                triggers {
                  cron('${schedule}')
                }
                stages {
                  stage('Restart RDS') {
                    steps {
                      echo "Restarting RDS Instance: ${dbname} in region: ${region}"
                    }
                  }
                }
              }
            </script>
            <sandbox>true</sandbox>
          </definition>
          <disabled>false</disabled>
        </flow-definition>
    """

    // Define the curl command to create the Jenkins job via API
    def createJobCommand = """
        curl -s -X POST "https://jenkins.yourdomain.com/${jenkinsPath}/createItem?name=${jobname}" \\
        --user "${username}:${token}" \\
        --header "Content-Type: text/xml" \\
        --data-binary '${jobConfig}'
    """

    // Execute the shell command
    sh createJobCommand

    // Log the job creation
    echo "Job '${jobname}' created in folder '${folder}' with schedule '${schedule}'"
}

// Function to format the Jenkins folder path for job creation
def getJenkinsJobPath(String folder) {
    if (folder.contains('/')) {
        // Split the folder path and format it as Jenkins job URL
        def parts = folder.split('/')
        return parts.collect { "job/${it}" }.join('/')
    } else {
        // Return simple folder path if no subfolder
        return "job/${folder}"
    }
}

// Helper function to extract data from the YAML file (db_name, region, schedule)
def extractSchedule(String yamlFilePath) {
    // Read the YAML file
    def yamlData = readYaml file: yamlFilePath

    // Extract dbname, region, and schedule
    def dbname = yamlData.dbname
    def region = yamlData.region
    def schedule = yamlData.schedule

    echo "Parsed YAML: dbname = ${dbname}, region = ${region}, schedule = ${schedule}"
    
    return [dbname: dbname, region: region, schedule: schedule]
}

// Helper function to get the names of all YAML files in the directory
def getFileNames(String directoryPath) {
    // Find all YAML files in the specified directory
    def files = findFiles(glob: "${directoryPath}/*.yaml")
    echo "YAML files found: ${files.collect { it.path }}"
    return files.collect { it.path }
}
